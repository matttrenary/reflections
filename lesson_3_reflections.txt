When would you want to use a remote repo rather than work local ---
If you're on a computer that you don't have your local work
on or perhaps isn't yours or doesn't have the software you
need. Or perhaps you wanted to avoid pushing work up but that 
seems like a minor hinderance.

Why pull changes manually instead of having GitHub stay up
to date automatically ---
Those changes might not be from you. You don't want to pull
in someone else's code that you know nothing about auto. Plus
you get to control what's in and what's not. Considering
the ease of use, that's an advantage.

Diff between fork/clone/branch and when to use each ---
Branches are local offshoots from a project. You'll use them
to test possible changes as you work locally. Clones are 
copies of entire project. This includes files and commits
so you're copying the entire history with it. Pretty great.
You can clone onto your local but from either a remote or 
local. A fork is just a github-github clone. Then once the
repo is yours, you can clone it down local if you need to.

Benefit of having last-known state of remote on local ---
Well it helps us just keep up to date with anyone else's
work for one. Which can prevent conflicts when you end up
pushing later. I dunno, this seems like such an obvious
question.

How would I collab w/o git/github? What's easier/harder?---
I'd probably have a shared workspace for files but have 
to communicate separate of those files. So the comm would
be harder to track to the improvements/work. Say a GDoc 
but then emails/chat separate. I guess you can chat in the 
doc but things get messy and it's not easy to separate
tasks. You may have a bunch of pull requests that are in
a variety of stages. The learning curve would be easier
and perhaps it'd make collab w/ less technical people
easier but overall I imagine git/GitHub is gonna save
time and reduce confusion.

When to work in branch/master? Benefits of each? ---
Seems like working in a branch is almost necessary
when collabing. Best way to get review of your work via 
pull request and if there are other possible changes
to your master, it'll be easier to incorporate those before
you are done with your work. Perhaps if it is a solo
local project, just plinking along on the master is fine.
It's a bit simpler but at the same time it fails to
accomodate separate devs going on at the same time.